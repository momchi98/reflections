UDACITY
"How to Use Git and GitHub"

LESSON 2 REFLECTIONS
________________________________________________________________________________
Q: 
    What happens when you initialize a repository? Why do you need to do it?

A: 
    When i initialize a repository a .git folder is created.
    Initializeing a repository is done when you want to use git to track the
    changes and control the versions of a file/group of files/project.
________________________________________________________________________________
Q: 
    How is the staging area different from the working directory and the
    repository? What value do you think it offers?

A:
    The staging area is between the working directory and the repository. It is
    used for making meaningful commits by easily adding and removing files that
    you want to commit before actualy commiting them.
________________________________________________________________________________
Q: 
    How can you use the staging area to make sure you have one commit per
    logical change?

A:
    By using the staging area you can see what tings are prepared to be
    commited, so you can easily control what is commited in the end.
________________________________________________________________________________
Q: 
    What are some situations when branches would be helpful in keeping your
    history organized? How would branches help?

A:
    Branches are helpful when you want to try what a new, different version will
    look like, giving it "tag" so that you can easily go back to it whenever
    you want.
________________________________________________________________________________
Q: 
    How do the diagrams help you visualize the branch structure?

A:
    They help by makeing it easier to understand the structure and where in the
    timeline new branches were created.
________________________________________________________________________________
Q: 
    What is the result of merging two branches together? Why do we represent it
    in the diagram the way we do?

A:
    The result of merging two branches is a branch that consists of all the
    necessary files and features of its parent branches. We represent it the way
    we do because in the timeline it is a new branch that inherits the ones that
    were merged into creating it.
________________________________________________________________________________
Q: 
    What are the pros and cons of Git's automatic merging vs. always doing
    merges manually?

A:
    Automatic merging makes it easier when the branches are simple and have no
    merge conflicts, while doing it manually gives you the ability to resolve
    the conflicts when necessary.
________________________________________________________________________________
